// Update the package index

sudo apt-get update

// Install packages to allow apt to use the repository over HTTPS

sudo apt install apt-transport-https ca-certificates curl software-properties-common

// Add Docker's official GPG key

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

// Setup a stable repository

sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"

// Update the package index

sudo apt-get update

// Install docker, containerd

sudo apt-get install docker-ce

// Pull the nginx image

sudo docker pull nginx:1.17.0

// Create a container out of the image

sudo docker run --name sampleapp -p 80:80 -d nginx:1.17.0


==============================================================

Container Deployment Group 

Step 1. deployment.yml--->


apiVersion: 2019-12-01
location: eastus
name: demogroup
properties:
  containers:
  - name: demoapp
    properties:
      image: nginx
      resources:
        requests:
          cpu: 1
          memoryInGb: 1.5
      ports:
      - port: 80
  osType: Linux
  ipAddress:
    type: Public
    ports:
    - protocol: tcp
      port: 80
type: Microsoft.ContainerInstance/containerGroups


Step2. upload above file on PowerShell
Step3. execute below command:
    az container create --resource-group RG-02 --file deployment.yml

==============================================================



Lab - Deploying to an Azure Kubernetes cluster - Resources
You can use the following resources as a reference for deploying nginx to a Kubernetes cluster

1. Create an app.yml file and enter the following content

apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-image
        image: nginx
        ports:
        - containerPort: 80
2. Create a service.yml file and enter the following content

apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: my-app


==============================================================











==============================================================








